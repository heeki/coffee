openapi: 3.0.1
info:
  title: unicorn-api-customer
  description: Unicorn Coffee API for Customers
  version: 0.1.0
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html

components:
  responses:
    error:
      description: error
  # schemas:
  #   error:
  #     type: object
  #     properties:
  #       code:
  #         type: integer
  #         format: int32
  #       message:
  #         type: string
  #   customer:
  #     type: object
  #     properties:
  #       id:
  #         type: string
  #       given_name:
  #         type: string
  #       family_name:
  #         type: string
  #       birthdate:
  #         type: string
  #       email:
  #         type: string
  #       phone_number:
  #         type: string
  #       phone_number_verified:
  #         type: boolean
  #   customers:
  #     type: array
  #     items:
  #       $ref: '#/components/schemas/customer'
  #   uid:
  #     type: object
  #     properties:
  #       uid:
  #         type: string
  securitySchemes:
    unicorn-api-authorizer:
      type: apiKey
      name: Authorization
      in: header
      x-amazon-apigateway-authorizer:
        type: request
        authorizeUri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${apiAuthorizer}/invocations'
        authorizerPayloadFormatVersion: 2.0
        authorizerResultTtlInSeconds: 10
        enableSimpleResponses: false
        identitySource: $request.header.Authorization

paths:
  /:
    get:
      summary: customer
      description: returns list of customers
      responses:
        200:
          description: ok
          # content:
          #   application/json:
          #     schema:
          #       $ref: '#/components/schemas/customers'
        500:
          $ref: '#/components/responses/error'
        default:
          description: ok
          # content:
          #   application/json:
          #     schema:
          #       $ref: '#/components/schemas/customers'
      security:
        - unicorn-api-authorizer: []
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 2.0
        responses:
          default:
            statusCode: 200
        type: AWS_PROXY
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Fn.Arn}/invocations'
    post:
      summary: customer
      description: create customer
      # requestBody:
      #   content:
      #     application/json:
      #       schema:
      #         $ref: '#/components/schemas/customer'
      #       examples:
      #         acme:
      #           value:
      #             uid: 'eac9f980-8180-49d8-836c-c01386bc94cf'
      #             name: 'Acme'
      #             email: 'contact@acme.com'
      #         hooli:
      #           value:
      #             uid: 'c92d40d1-5391-4c48-9f7e-51091cd9e551'
      #             name: 'Hooli'
      #             email: 'contact@hooli.com'
      responses:
        200:
          description: ok
          # content:
          #   application/json:
          #     schema:
          #       $ref: '#/components/schemas/customer'
        default:
          description: error
      security:
        - unicorn-api-authorizer: []
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 2.0
        responses:
          default:
            statusCode: 200
        type: AWS_PROXY
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Fn.Arn}/invocations'
  /{proxy+}:
    get:
      summary: customer
      description: returns customer details
      parameters:
        - in: path
          name: uid
          required: true
          schema:
            type: string
          description: customer id
      responses:
        200:
          description: ok
          # content:
          #   application/json:
          #     schema:
          #       $ref: '#/components/schemas/customer'
        500:
          $ref: '#/components/responses/error'
        default:
          $ref: '#/components/responses/error'
      security:
        - unicorn-api-authorizer: []
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 2.0
        responses:
          default:
            statusCode: 200
        type: AWS_PROXY
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FnUid.Arn}/invocations'
    post:
      summary: customer
      description: update customer
      parameters:
        - in: path
          name: uid
          required: true
          schema:
            type: string
          description: customer
      # requestBody:
      #   content:
      #     application/json:
      #       schema:
      #         $ref: '#/components/schemas/customer'
      #       examples:
      #         acme:
      #           value:
      #             uid: 'eac9f980-8180-49d8-836c-c01386bc94cf'
      #             name: 'Acme'
      #             email: 'contact@acme.com'
      #         hooli:
      #           value:
      #             uid: 'c92d40d1-5391-4c48-9f7e-51091cd9e551'
      #             name: 'Hooli'
      #             email: 'contact@hooli.com'
      responses:
        200:
          description: ok
          # content:
          #   application/json:
          #     schema:
          #       $ref: '#/components/schemas/customer'
        500:
          $ref: '#/components/responses/error'
        default:
          $ref: '#/components/responses/error'
      security:
        - unicorn-api-authorizer: []
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 2.0
        responses:
          default:
            statusCode: 200
        type: AWS_PROXY
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FnUid.Arn}/invocations'
    delete:
      summary: customer
      description: deletes customer
      parameters:
        - in: path
          name: uid
          required: true
          schema:
            type: string
          description: customer id
      responses:
        200:
          description: ok
        500:
          $ref: '#/components/responses/error'
        default:
          $ref: '#/components/responses/error'
      security:
        - unicorn-api-authorizer: []
      x-amazon-apigateway-integration:
        httpMethod: POST
        payloadFormatVersion: 2.0
        responses:
          default:
            statusCode: 200
        type: AWS_PROXY
        uri:
          Fn::Sub: 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${FnUid.Arn}/invocations'