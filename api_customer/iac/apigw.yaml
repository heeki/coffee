AWSTemplateFormatVersion: '2010-09-09'
Description: Unicorn Coffee APIGW for Customers
Transform: AWS::Serverless-2016-10-31
Globals:
  Api:
    OpenApiVersion: 3.0.1
  Function:
    Runtime: python3.8
    Timeout: 60
Parameters:
  certificateArn:
    Type: String
  domainName:
    Type: String
  hostedZoneId:
    Type: String
  apiStage:
    Type: String
  swaggerBucket:
    Type: String
  swaggerKey:
    Type: String
Resources:
  # APIGW
  Api:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: !Ref apiStage
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: !Sub 's3://${swaggerBucket}/${swaggerKey}'
  ApiMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    Properties:
      ApiId: !Ref Api
      ApiMappingKey: customer
      DomainName: !Ref domainName
      Stage: !Ref apiStage
    DependsOn:
      - ApiStage

  # DynamoDB
  Table:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: email
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: email
          KeyType: HASH

  # Lambda
  ExecRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: '/service-role/'
      Policies:
        - PolicyName: cloudwatch-logs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource: 'arn:aws:logs:*:*:*'
  Fn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../src
      Handler: customer.handler
      Role: !GetAtt ExecRole.Arn
  LogGroupFn:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${Fn}"
      RetentionInDays: 7
  PermFn:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt Fn.Arn
      Principal: apigateway.amazonaws.com
      Action: lambda:InvokeFunction
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*/*/*'
Outputs:
  outApi:
    Value: !Ref Api
  outTable:
    Value: !Ref Table
  outFn:
    Value: !Ref Fn
