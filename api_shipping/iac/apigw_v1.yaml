AWSTemplateFormatVersion: '2010-09-09'
Description: Unicorn Coffee APIGW for Shipping
Transform: AWS::Serverless-2016-10-31
Globals:
  Api:
    OpenApiVersion: 3.0.1
  Function:
    Runtime: python3.8
    Timeout: 60
Parameters:
  certificateArn:
    Type: String
  domainName:
    Type: String
  hostedZoneId:
    Type: String
  apiStage:
    Type: String
  apiAuthorizer:
    Type: String
  swaggerBucket:
    Type: String
  swaggerKey:
    Type: String
  payloadVersion:
    Type: String
Resources:
  # APIGW
  Api:
    Type: AWS::Serverless::Api
    Properties:
      AccessLogSetting:
        DestinationArn: !GetAtt ApiLogGroup.Arn
        Format: '{
          "ctx.requestId":"$context.requestId",
          "ctx.ip": "$context.identity.sourceIp",
          "ctx.requestTime":"$context.requestTime",
          "ctx.httpMethod":"$context.httpMethod",
          "ctx.routeKey":"$context.routeKey",
          "ctx.status":"$context.status",
          "ctx.protocol":"$context.protocol",
          "ctx.responseLength":"$context.responseLength",
          "auth.status":"$context.authorizer.status",
          "auth.error":"$context.authorizer.error",
          "auth.token":"$context.authorizer.token",
          "auth.reason":"$context.authorizer.reason",
          "auth.simple":"$context.authorizer.simple",
          "auth.pversion":"$context.authorizer.pversion"
        }'
          # "input.body":"$input.json($)",
          # "input.params" : {
          #   "headers" : {
          #     #foreach($header in $input.params().header.keySet())
          #     "$header" : "$util.escapeJavaScript($input.params().header.get($header))"
          #     #if($foreach.hasNext),#end
          #     #end
          #   },
          #   "path" : {
          #     #foreach($path in $input.params().path.keySet())
          #     "$path" : "$util.escapeJavaScript($input.params().path.get($path))"
          #     #if($foreach.hasNext),#end
          #     #end
          #   },
          #   "query" : {
          #     #foreach($query in $input.params().query.keySet())
          #     "$query" : "$util.escapeJavaScript($input.params().query.get($query))"
          #     #if($foreach.hasNext),#end
          #     #end
          #   }
          # }
      StageName: !Ref apiStage
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            # Location: !Sub 's3://${swaggerBucket}/${swaggerKey}'
            Location: ./swagger_v1.yaml
      EndpointConfiguration:
        Type: REGIONAL
  ApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/apigateway/unicorn-api-shipping-${Api}"
      RetentionInDays: 7
  ApiMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      RestApiId: !Ref Api
      BasePath: shipping-v1
      DomainName: !Ref domainName
      Stage: !Ref apiStage
    DependsOn:
      - ApiStage

  # Lambda
  FnExecRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: '/service-role/'
      Policies:
        - PolicyName: cloudwatch-logs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource: 'arn:aws:logs:*:*:log-group:*:*'
  Fn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../src
      Handler: fn.handler
      Role: !GetAtt FnExecRole.Arn
      Layers:
        - !Sub 'arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:2'
  FnLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${Fn}"
      RetentionInDays: 7
  FnPerm:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt Fn.Arn
      Principal: apigateway.amazonaws.com
      Action: lambda:InvokeFunction
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*/*/*'

Outputs:
  outApi:
    Value: !Ref Api
  outFn:
    Value: !Ref Fn