AWSTemplateFormatVersion: '2010-09-09'
Description: Unicorn Coffee APIGW for Shipping
Transform: AWS::Serverless-2016-10-31
Globals:
  Api:
    OpenApiVersion: 3.0.1
  Function:
    Runtime: python3.8
    Timeout: 60
Parameters:
  domainName:
    Type: String
  apiStage:
    Type: String
  apiAuthorizer:
    Type: String
  swaggerBucket:
    Type: String
  swaggerKey:
    Type: String
  payloadVersion:
    Type: String
  enableSimple:
    Type: String
  sf:
    Type: String
Resources:
  # S3
  Bucket:
    Type: AWS::S3::Bucket
  # APIGW
  ApiExecRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: '/service-role/'
      Policies:
        - PolicyName: sf
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                  - states:StartSyncExecution
                Resource: !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:${sf}"
  Api:
    Type: AWS::Serverless::HttpApi
    Properties:
      AccessLogSettings:
        DestinationArn: !GetAtt ApiLogGroup.Arn
        Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod","routeKey":"$context.routeKey", "status":"$context.status","protocol":"$context.protocol", "responseLength":"$context.responseLength", "auth.status":"$context.authorizer.status", "auth.error":"$context.authorizer.error", "auth.token":"$context.authorizer.token", "auth.reason":"$context.authorizer.reason", "auth.simple":"$context.authorizer.simple", "auth.pversion":"$context.authorizer.pversion", "response.latency.ms":"$context.responseLatency", "error.message":"$context.error.message" }'
      StageName: !Ref apiStage
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: !Sub 's3://${swaggerBucket}/${swaggerKey}'
  ApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/apigateway/unicorn-api-processor-${Api}"
      RetentionInDays: 7
  ApiMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    Properties:
      ApiId: !Ref Api
      ApiMappingKey: processor
      DomainName: !Ref domainName
      Stage: !Ref apiStage
    DependsOn:
      - ApiStage
  # Lambda
  FnExecRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: '/service-role/'
      Policies:
        - PolicyName: cloudwatch-logs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource: 'arn:aws:logs:*:*:log-group:*:*'
        - PolicyName: s3
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Join ["/", [!GetAtt Bucket.Arn, "*"]]
  # Landing
  FnLanding:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../src
      Handler: fn_landing.handler
      Role: !GetAtt FnExecRole.Arn
      Environment:
        Variables:
          BUCKET: !Ref Bucket
  FnLandingLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${FnLanding}"
      RetentionInDays: 7
  FnLandingPerm:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt FnLanding.Arn
      Principal: apigateway.amazonaws.com
      Action: lambda:InvokeFunction
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*/*/*'
  # Usage
  FnUsage:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../src
      Handler: fn_usage.handler
      Role: !GetAtt FnExecRole.Arn
  FnUsageLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${FnUsage}"
      RetentionInDays: 7
  FnUsagePerm:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt FnUsage.Arn
      Principal: apigateway.amazonaws.com
      Action: lambda:InvokeFunction
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*/*/*'
Outputs:
  outApi:
    Value: !Ref Api
  outFnLanding:
    Value: !GetAtt FnLanding.Arn
  outFnUsage:
    Value: !GetAtt FnUsage.Arn