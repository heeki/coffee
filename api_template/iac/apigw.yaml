AWSTemplateFormatVersion: '2010-09-09'
Description: Template API Gateway endpoint
Transform: AWS::Serverless-2016-10-31
Globals:
  Api:
    OpenApiVersion: 3.0.1
  Function:
    Runtime: python3.8
    Timeout: 60
    Layers:
      - !Sub 'arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:18'
Parameters:
  pCertificateArn:
    Type: String
  pDomainName:
    Type: String
  pHostedZoneId:
    Type: String
  pApiStage:
    Type: String
  pOpenapiBucket:
    Type: String
  pOpenapiKeyHttp:
    Type: String
  pOpenapiKeyRest:
    Type: String
Resources:
  # APIGW
  ApiHttp:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: !Ref pApiStage
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: !Sub 's3://${pOpenapiBucket}/${pOpenapiKeyHttp}'
  ApiRest:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref pApiStage
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: !Sub 's3://${pOpenapiBucket}/${pOpenapiKeyRest}'

  # Domain
  # ApiMapping:
  #   Type: AWS::ApiGatewayV2::ApiMapping
  #   Properties:
  #     ApiId: !Ref ApiHttp
  #     ApiMappingKey: template
  #     DomainName: !Ref pDomainName
  #     Stage: !Ref pApiStage
  #   DependsOn:
  #     - ApiHttpStage

  # Lambda
  ExecRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: '/service-role/'
      Policies:
        - PolicyName: cloudwatch-logs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource: 'arn:aws:logs:*:*:log-group:*:*'
  Fn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../src
      Handler: lambda.handler
      Role: !GetAtt ExecRole.Arn
  LogGroupFn:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${Fn}"
      RetentionInDays: 7
  PermFnHttp:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt Fn.Arn
      Principal: apigateway.amazonaws.com
      Action: lambda:InvokeFunction
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiHttp}/*/*/*'
  PermFnRest:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt Fn.Arn
      Principal: apigateway.amazonaws.com
      Action: lambda:InvokeFunction
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiRest}/*/*/*'
Outputs:
  outApiHttp:
    Value: !Ref ApiHttp
  outApiHttpUrl:
    Value: !Sub 'https://${ApiHttp}.execute-api.${AWS::Region}.amazonaws.com/${pApiStage}'
  outApiRest:
    Value: !Ref ApiRest
  outApiRestUrl:
    Value: !Sub 'https://${ApiRest}.execute-api.${AWS::Region}.amazonaws.com/${pApiStage}'
  outFn:
    Value: !Ref Fn