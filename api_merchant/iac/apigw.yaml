AWSTemplateFormatVersion: '2010-09-09'
Description: APIGW for testing API keys
Transform: AWS::Serverless-2016-10-31
Globals:
  Api:
    OpenApiVersion: 3.0.1
  Function:
    Layers:
      - !Sub 'arn:aws:lambda:${AWS::Region}:580247275435:layer:LambdaInsightsExtension:14'
    Runtime: python3.8
    Timeout: 60
    Tracing: Active
Parameters:
  apiStage:
    Type: String
  payloadVersion:
    Type: String
Resources:
  # APIGW
  Api:
    Type: AWS::Serverless::Api
    Properties:
      AccessLogSetting:
        DestinationArn: !GetAtt ApiLogGroup.Arn
        Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod","routeKey":"$context.routeKey", "status":"$context.status","protocol":"$context.protocol", "responseLength":"$context.responseLength" }'
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: ./swagger.yaml
      EndpointConfiguration:
        Type: REGIONAL
      StageName: !Ref apiStage
      # TracingEnabled: True
  ApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/apigateway/apigw-keys-${Api}"
      RetentionInDays: 7
  ApiKey1:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Name: apigw-key-1
      Enabled: True
      StageKeys:
        - RestApiId: !Ref Api
          StageName: !Ref apiStage
  ApiKey2:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Name: apigw-key-2
      Enabled: True
      StageKeys:
        - RestApiId: !Ref Api
          StageName: !Ref apiStage
  ApiUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      ApiStages:
        - ApiId: !Ref Api
          Stage: !Ref apiStage
      Quota:
        Limit: 1000
        Period: DAY
      Throttle:
        BurstLimit: 100
        RateLimit: 10.0
      UsagePlanName: apigw-usage-1
  ApiUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref ApiKey1
      KeyType: API_KEY
      UsagePlanId: !Ref ApiUsagePlan
  # Lambda
  FnExecRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: '/service-role/'
      Policies:
        - PolicyName: cloudwatch-logs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource: 'arn:aws:logs:*:*:log-group:*:*'
        - PolicyName: cloudwatch-insights
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                Resource: '*'
        - PolicyName: xray
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                  - xray:GetSamplingRules
                  - xray:GetSamplingTargets
                  - xray:GetSamplingStatisticSummaries
                Resource: '*'
  # Resource: /
  Fn:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../src
      Handler: fn.handler
      Role: !GetAtt FnExecRole.Arn
  FnLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${Fn}"
      RetentionInDays: 7
  FnPerm:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt Fn.Arn
      Principal: apigateway.amazonaws.com
      Action: lambda:InvokeFunction
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*/*/*'
Outputs:
  outApi:
    Value: !Ref Api
  outApiUrl:
    Value: !Sub 'https://${Api}.execute-api.${AWS::Region}.amazonaws.com/${apiStage}'
  outFn:
    Value: !Ref Fn
  outApiKey1:
    Value: !Ref ApiKey1
  outApiKey2:
    Value: !Ref ApiKey2
  outUsagePlan:
    Value: !Ref ApiUsagePlan
